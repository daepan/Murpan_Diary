/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => EmotionPickerPlugin
});
var import_obsidian4 = __toModule(require("obsidian"));

// src/emotions/DefaultEmotions.ts
var DEFAULT_EMOTIONS = [
  {
    id: 1,
    name: "Joy",
    color: "#c1e08d",
    emotions: [
      "joyful",
      "content",
      "pleased",
      "satisfied",
      "happy",
      "amused",
      "delighted",
      "cheerful",
      "jovial",
      "blissful",
      "proud",
      "triumphant",
      "optimistic",
      "eager",
      "hopeful",
      "enthusiastic",
      "excited",
      "euphoric",
      "enchanted"
    ]
  },
  {
    id: 2,
    name: "Love",
    color: "#e8c3da",
    emotions: [
      "loving",
      "romantic",
      "affectionate",
      "passionate",
      "attracted",
      "sentimental",
      "compassionate",
      "satisfied",
      "peaceful",
      "relieved"
    ]
  },
  {
    id: 3,
    name: "Surprise",
    color: "#94d4d3",
    emotions: [
      "surprised",
      "shocked",
      "dismayed",
      "confused",
      "disillusioned",
      "perplexed",
      "amazed",
      "astonished",
      "moved",
      "touched"
    ]
  },
  {
    id: 4,
    name: "Anger",
    color: "#b84444",
    emotions: [
      "angry",
      "enraged",
      "hateful",
      "hostile",
      "agitated",
      "frustrated",
      "irritated",
      "annoyed",
      "aggravated",
      "envious",
      "jealous",
      "disgusted",
      "contemptful"
    ]
  },
  {
    id: 5,
    name: "Sadness",
    color: "#4e72a3",
    emotions: [
      "sad",
      "hurt",
      "agonizing",
      "depressed",
      "sorrowful",
      "disappointed",
      "dismayed",
      "displeased",
      "shameful",
      "regretful",
      "guilty",
      "neglected",
      "isolated",
      "lonely",
      "despaired",
      "grieving",
      "powerless"
    ]
  },
  {
    id: 6,
    name: "Fear",
    color: "#dbab4b",
    emotions: [
      "fearful",
      "scared",
      "helpless",
      "frightened",
      "panicking",
      "hystetical",
      "insecure",
      "inferior",
      "inadequate",
      "nervous",
      "anxious",
      "worried",
      "dreadful",
      "mortified"
    ]
  }
];

// src/settings/PluginSettings.ts
var DefaultSettings = class {
  constructor() {
    this.modalHeaderText = "What do you feel?";
    this.useCommaInSeparator = false;
    this.addAsLink = false;
    this.addAsTag = false;
    this.capitalize = false;
    this.emotions = DEFAULT_EMOTIONS;
  }
};

// src/SmileIcon.ts
var import_obsidian = __toModule(require("obsidian"));
function addSmileIcon() {
  (0, import_obsidian.addIcon)("smile", `<path fill="currentColor" stroke="currentColor" 
        d="M50 0C22.43 0 0 22.43 0 50C0 77.57 22.43 100 50 100C77.57 100 100 77.57 100 
        50C100 22.43 77.57 0 50 0ZM50 90.9091C27.4427 90.9091 9.09091 72.5573 9.09091 50C9.09091 27.4427 27.4427 9.09091 
        50 9.09091C72.5573 9.09091 90.9091 27.4427 90.9091 50C90.9091 72.5573 72.5573 90.9091 50 90.9091Z" />
        <path fill="currentColor" stroke="currentColor"  d="M62.2139 62.2136C55.4788 68.9482 44.5212 68.9485 37.7863 62.2139C36.0115 
        60.4388 33.1333 60.4388 31.3582 62.2139C29.583 63.9891 29.583 66.867 31.3582 68.6421C36.4985 
        73.7824 43.2479 76.3515 50.0003 76.3515C56.7506 76.3515 63.5033 73.7812 68.6424 68.6421C70.4176 
        66.8673 70.4176 63.9891 68.6424 62.2139C66.867 60.4385 63.9888 60.4388 62.2139 62.2136Z"/> 
        <path fill="currentColor" stroke="currentColor"  d="M34.8909 44.5879C36.0212 43.4606 36.6667 41.897 36.6667 40.303C36.6667 38.7091 36.0212 37.1455 34.8909 36.0182C33.7637 
        34.8909 32.2 34.2424 30.6061 34.2424C29.0088 34.2424 27.4485 34.8909 26.3209 36.0182C25.1909 37.1455 24.5455 38.7091 24.5455 40.303C24.5455 
        41.897 25.1909 43.4606 26.3209 44.5879C27.4485 45.7182 29.0121 46.3636 30.6061 46.3636C32.2 46.3636 33.7637 45.7182 34.8909 44.5879Z"/>
        <path fill="currentColor" stroke="currentColor"  d="M69.3939 34.2424C67.8 34.2424 66.2363 34.8909 65.1088 36.0182C63.9818 37.1455 63.3333 38.7061 
        63.3333 40.303C63.3333 41.9 63.9818 43.4606 65.1088 44.5879C66.2363 45.7182 67.8 46.3636 69.3939 
        46.3636C70.9879 46.3636 72.5515 45.7182 73.6788 44.5879C74.806 43.4606 75.4545 41.9 75.4545 
        40.303C75.4545 38.7091 74.8057 37.1455 73.6788 36.0182C72.5515 34.8909 70.9879 34.2424 69.3939 34.2424Z"/>`);
}

// src/Modal.ts
var import_obsidian2 = __toModule(require("obsidian"));
var EmotionPickerModal = class extends import_obsidian2.Modal {
  constructor(app, plugin) {
    super(app);
    this.app = app;
    this.plugin = plugin;
    this.emotions = plugin.settings.emotions;
  }
  onOpen() {
    const { contentEl } = this;
    this.state = this.plugin.settings;
    contentEl.classList.add("modal-body");
    this.generateHeading();
    this.generateToggles();
    this.generateContentFromEmotions();
    const view = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
    if (view) {
      this.editor = view.editor;
      this.initialCursorPosition = this.editor.getCursor();
    } else {
      new import_obsidian2.Notice(`Error getting cursor position.`);
      this.close();
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    this.initialCursorPosition = void 0;
  }
  generateHeading() {
    const headingEl = this.contentEl.createEl("h3");
    headingEl.innerText = this.plugin.settings.modalHeaderText;
  }
  generateToggles() {
    const togglesEl = this.contentEl.createDiv();
    togglesEl.addClass("toggles-section");
    const useCommaToggleEl = this.generateToggleElement(togglesEl, "add comma after", this.state.useCommaInSeparator);
    useCommaToggleEl.onClickEvent(() => {
      this.state.useCommaInSeparator = !this.state.useCommaInSeparator;
    });
    const addAsLinkToggleEl = this.generateToggleElement(togglesEl, "add as [[link]]", this.state.addAsLink);
    addAsLinkToggleEl.onClickEvent(() => {
      this.state.addAsLink = !this.state.addAsLink;
    });
    const addAsTagToggleEl = this.generateToggleElement(togglesEl, "add as #tag", this.state.addAsTag);
    addAsTagToggleEl.onClickEvent(() => {
      this.state.addAsTag = !this.state.addAsTag;
    });
  }
  generateContentFromEmotions() {
    const contentEl = this.contentEl.createDiv();
    this.emotions.forEach((section) => {
      this.generateElementFromEmotionSection(section, contentEl);
    });
  }
  generateElementFromEmotionSection(section, baseEl) {
    const sectionEl = baseEl.createDiv();
    sectionEl.classList.add("emotion-section");
    const heading = sectionEl.createEl("h4");
    heading.innerText = section.name;
    heading.style.color = section.color;
    heading.style.fontWeight = "bold";
    section.emotions.forEach((emotionString) => {
      const emotionEl = sectionEl.createDiv();
      emotionEl.innerHTML = emotionString;
      emotionEl.style.textDecorationColor = section.color;
      emotionEl.classList.add("emotion-element");
      emotionEl.onClickEvent(() => {
        this.insertText(this.getFinalText(emotionString));
      });
    });
  }
  insertText(text) {
    if (this.editor) {
      this.editor.replaceRange(text, this.initialCursorPosition);
      this.initialCursorPosition.ch += text.length;
    }
    new import_obsidian2.Notice(`Inserted '${text}'.`);
  }
  generateToggleElement(baseEl, text, initialState = false) {
    const toggleContainerEl = baseEl.createDiv();
    const toggleEl = toggleContainerEl.createDiv();
    toggleEl.classList.add("checkbox-container");
    toggleEl.onClickEvent(() => toggleEl.classList.toggle("is-enabled"));
    if (initialState == true) {
      toggleEl.classList.add("is-enabled");
    }
    const labelEl = toggleContainerEl.createEl("span");
    labelEl.classList.add("emotion-toggle-label");
    labelEl.textContent = text;
    return toggleContainerEl;
  }
  getFinalText(text) {
    console.log(this.plugin.settings);
    if (this.state.capitalize)
      text = this.capitalize(text);
    if (this.state.addAsTag)
      text = `#${text}`;
    if (this.state.addAsLink)
      text = `[[${text}]]`;
    if (this.state.useCommaInSeparator)
      text = text + ", ";
    text = " " + text;
    return text;
  }
  capitalize(text) {
    return text.charAt(0).toUpperCase() + text.slice(1);
  }
};

// src/settings/SettingsTab.ts
var import_obsidian3 = __toModule(require("obsidian"));
var EmotionPickerSettingsTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  refresh() {
    this.display();
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Emotion Picker Settings" });
    new import_obsidian3.Setting(containerEl).setName("Modal header text").setDesc("Customize modal header text").addText((textField) => {
      textField.setValue(this.plugin.settings.modalHeaderText);
      textField.onChange((newValue) => {
        this.plugin.settings.modalHeaderText = newValue;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian3.Setting(containerEl).setName("Add comma after").setDesc("Add a comma after pasted emotion").addToggle((toggle) => toggle.setValue(this.plugin.settings.useCommaInSeparator).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.useCommaInSeparator = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian3.Setting(containerEl).setName("Insert as link").setDesc("Insert emotion as a [[link]]").addToggle((toggle) => toggle.setValue(this.plugin.settings.addAsLink).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.addAsLink = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian3.Setting(containerEl).setName("Insert as tag").setDesc("Insert emotion as a #tag").addToggle((toggle) => toggle.setValue(this.plugin.settings.addAsTag).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.addAsTag = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian3.Setting(containerEl).setName("Capitalize").setDesc("Capitalize (useful if inserting emotion as link or tag)").addToggle((toggle) => toggle.setValue(this.plugin.settings.capitalize).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.capitalize = value;
      yield this.plugin.saveSettings();
    })));
    containerEl.createEl("h3", { text: "Emotion groups" });
    this.plugin.settings.emotions.forEach((es) => {
      const setting = new import_obsidian3.Setting(containerEl);
      setting.setClass("emotion-section-setting");
      const groupNameLabel = createEl("span", { text: "Name: " });
      setting.controlEl.appendChild(groupNameLabel);
      setting.addText((textField) => {
        textField.setValue(es.name).setPlaceholder("group name").onChange((value) => {
          es.name = value;
          this.plugin.saveSettings;
        });
      });
      const colorPickerLabel = createEl("span", { text: "Color: " });
      setting.controlEl.appendChild(colorPickerLabel);
      const colorPicker = createEl("input", {
        type: "color",
        cls: "settings-color-picker"
      }, (el) => {
        el.value = es.color;
        el.onchange = () => {
          es.color = el.value;
          this.plugin.saveSettings();
        };
      });
      setting.controlEl.appendChild(colorPicker);
      const emotionsListLabel = createEl("span", { text: "Emotions:" });
      setting.controlEl.appendChild(emotionsListLabel);
      setting.addTextArea((textArea) => {
        textArea.inputEl.setAttribute("rows", es.emotions.length.toString());
        textArea.setPlaceholder("emotions, separated by newline or comma.").setValue(es.emotions.join("\n")).onChange((value) => __async(this, null, function* () {
          es.emotions = splitByCommaAndNewline(value);
          this.plugin.saveSettings();
        }));
      });
      setting.addButton((btn) => {
        btn.setButtonText("delete group");
        btn.setClass("settings-delete-btn");
        btn.onClick(() => {
          this.plugin.settings.emotions = this.plugin.settings.emotions.filter((e) => e.id !== es.id);
          this.plugin.saveSettings();
          this.refresh();
        });
      });
    });
    new import_obsidian3.Setting(containerEl).addButton((btn) => {
      btn.setButtonText("Add group");
      btn.onClick(() => {
        this.plugin.settings.emotions.push({
          id: Math.max(...this.plugin.settings.emotions.map((e) => e.id)) + 1,
          name: "New section",
          emotions: [],
          color: "#000000"
        });
        this.plugin.saveSettings();
        this.refresh();
      });
    });
  }
};
function splitByCommaAndNewline(rawEmotions) {
  const splitted = [];
  rawEmotions.split("\n").forEach((s) => s.split(",").forEach((sp) => splitted.push(sp.trim())));
  return splitted;
}

// main.ts
var EmotionPickerPlugin = class extends import_obsidian4.Plugin {
  onload() {
    return __async(this, null, function* () {
      addSmileIcon();
      this.addRibbonIcon("smile", "Emotions Picker", (evt) => {
        new EmotionPickerModal(this.app, this).open();
      });
      this.addCommand({
        id: "Open",
        name: "Open",
        callback: () => {
          new EmotionPickerModal(this.app, this).open();
        }
      });
      yield this.loadSettings();
      this.addSettingTab(new EmotionPickerSettingsTab(this.app, this));
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, new DefaultSettings(), yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      console.log("saving settings with emotions:", this.settings.emotions);
      yield this.saveData(this.settings);
    });
  }
};
